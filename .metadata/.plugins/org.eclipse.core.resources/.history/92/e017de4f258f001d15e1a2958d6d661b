/*
 * Julian O'Brien
 * ECE Applications
 * Assignment #3
 * Weather Baloon
 */

#include "stdio.h"
#include "math.h"

//
// These are the two polynomial equations used
//

// This equation returns the altitude in meters of the balloon
// at the given hour t.
// -0.12t^4 + 12t^3 - 380t^2 + 4100t + 220
#define calculate_altitude(t) \
          ( ((-0.12) * pow(t, 4.0)) + \
          (12.0 * pow(t, 3.0)) - \
          (380.0 * pow(t, 2.0)) + \
          (4100.0 * t) + 220.0 )

// This equation returns the velocity in meters/hour of the balloon
// at a given hour t.
// -0.48t^3 + 36t^2 - 760t + 4100
#define calculate_velocity(t) \
          ( ((-0.48) * pow(t, 3.0)) + \
          (36.0 * pow(t, 2.0)) - \
          (760.0 * t) + 4100.0 )

#define MAX_INPUT_VALUE					48
#define MINUTES_IN_HOUR					60
#define SECONDS_IN_MINUTE				60

#define PRINT_NEW_LINE					printf("\n");

#define CELL_PADDING						10
#define COL_1_PADDING						5
#define COL_2_PADDING						10
#define COL_3_PADDING						10

#define TRUE										1

// loops displaying the message and getting the input
// until the input is valid
void get_valid_user_input(const char *message, double *input){
  while (TRUE){
    printf(message);
    scanf("%lf", input);
    // if the input greater than 0 and
    // less than the max, then it is valid
    if (*input >= 0 && *input <= MAX_INPUT_VALUE){
      break;
    }
  }
}

// get the user input
void get_user_input(double *initial_hour, double *increment_hour, double *final_hour){
  get_valid_user_input("Enter the initial value for the table in hours ", initial_hour);
  get_valid_user_input("Enter the increment bewteen lines in hours     ", increment_hour);
  get_valid_user_input("Enter the final value for the table in hours   ", final_hour);
}

// convert meters/hr to meters/s
double convert_mph_to_mps(const double velocity_in_mph){
  return velocity_in_mph / (MINUTES_IN_HOUR * SECONDS_IN_MINUTE);
}

// print a double
void print_d(const double d, const int padding){
  printf("%*.2f", padding, d);
}

void print_hour(const double d){
  print_d(d, COL_1_PADDING);
}

void print_altitude(const double d){
  print_d(d, COL_2_PADDING);
}

void print_velocity(const double d){
  print_d(d, COL_3_PADDING);
}

// print a string
void print_s(const char *str, const int padding){
  printf(" %-*s", padding - 1, str);
}

int main(){
  double initial_hour;
  double increment_hour;
  double final_hour;

  get_user_input(&initial_hour, &increment_hour, &final_hour);

  // space the table away from the input
  PRINT_NEW_LINE; PRINT_NEW_LINE;

  // print the table heading
  printf("Weather Balloon Information"); PRINT_NEW_LINE;

  print_s("Time", COL_1_PADDING);
  print_s("Height", COL_2_PADDING);
  print_s("Velocity", COL_3_PADDING);
  PRINT_NEW_LINE;

  print_s("hrs", COL_1_PADDING);
  print_s("meters", COL_2_PADDING);
  print_s("meters/s", COL_3_PADDING);
  PRINT_NEW_LINE;

  double current_hour;
  current_hour = initial_hour;

  double highest_alt, highest_alt_time;
  highest_alt = 0.0;
  highest_alt_time = 0.0;

  while(current_hour <= final_hour){
    // print the current time in hours
    print_hour(current_hour);

    // calculate and print the altitude
    double altitude;
    altitude = calculate_altitude(current_hour);
    print_altitude(altitude);

    // check for the highest altitude
    if (altitude > highest_alt){
      highest_alt = altitude;
      highest_alt_time = current_hour;
    }

    // calculate and print the velocity
    double velocity;
    velocity = convert_mph_to_mps( calculate_velocity(current_hour) );
    print_velocity(velocity);

    // print a newline at the end of each row
    PRINT_NEW_LINE;

    // move forward in time
    current_hour += increment_hour;
  }

  // space the maximum altitude display away
  // from the table
  PRINT_NEW_LINE; PRINT_NEW_LINE;

  // print the maximum height
  printf("Maximum ballon height was %.2f meters", highest_alt); PRINT_NEW_LINE;
  printf("That occurred at %.2f hours", highest_alt_time); PRINT_NEW_LINE;

  return 0;
}
